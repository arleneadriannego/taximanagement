# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

enum CoverageType {
  COLLISION_COVERAGE
  COMPREHENSIVE_COVERAGE
  LIABILITY_DAMAGE
  PERSONAL_INJURY_COVERAGE
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input EnumCoverageTypeFieldUpdateOperationsInput {
  set: CoverageType
}

input EnumCoverageTypeFilter {
  equals: CoverageType
  in: [CoverageType!]
  not: NestedEnumCoverageTypeFilter
  notIn: [CoverageType!]
}

input EnumUserRoleFieldUpdateOperationsInput {
  set: UserRole
}

input EnumUserRoleFilter {
  equals: UserRole
  in: [UserRole!]
  not: NestedEnumUserRoleFilter
  notIn: [UserRole!]
}

type Insurance {
  coveragEndDate: DateTime!
  coverageStartDate: DateTime!
  coverageType: CoverageType!
  createdAt: DateTime!
  id: String!
  isActive: Boolean!
  policyNumber: String!
  provider: String!
  updatedAt: DateTime!
}

input InsuranceCreateInput {
  coveragEndDate: DateTime!
  coverageStartDate: DateTime!
  coverageType: CoverageType!
  createdAt: DateTime
  id: String
  isActive: Boolean
  policyNumber: String!
  provider: String!
  taxis: TaxiCreateNestedManyWithoutInsuranceInput
  updatedAt: DateTime
}

input InsuranceCreateNestedOneWithoutTaxisInput {
  connect: InsuranceWhereUniqueInput
  connectOrCreate: InsuranceCreateOrConnectWithoutTaxisInput
  create: InsuranceCreateWithoutTaxisInput
}

input InsuranceCreateOrConnectWithoutTaxisInput {
  create: InsuranceCreateWithoutTaxisInput!
  where: InsuranceWhereUniqueInput!
}

input InsuranceCreateWithoutTaxisInput {
  coveragEndDate: DateTime!
  coverageStartDate: DateTime!
  coverageType: CoverageType!
  createdAt: DateTime
  id: String
  isActive: Boolean
  policyNumber: String!
  provider: String!
  updatedAt: DateTime
}

input InsuranceOrderByInput {
  coveragEndDate: SortOrder
  coverageStartDate: SortOrder
  coverageType: SortOrder
  createdAt: SortOrder
  id: SortOrder
  isActive: SortOrder
  policyNumber: SortOrder
  provider: SortOrder
  updatedAt: SortOrder
}

input InsuranceRelationFilter {
  is: InsuranceWhereInput
  isNot: InsuranceWhereInput
}

enum InsuranceScalarFieldEnum {
  coveragEndDate
  coverageStartDate
  coverageType
  createdAt
  id
  isActive
  policyNumber
  provider
  updatedAt
}

input InsuranceUpdateInput {
  coveragEndDate: DateTimeFieldUpdateOperationsInput
  coverageStartDate: DateTimeFieldUpdateOperationsInput
  coverageType: EnumCoverageTypeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  policyNumber: StringFieldUpdateOperationsInput
  provider: StringFieldUpdateOperationsInput
  taxis: TaxiUpdateManyWithoutInsuranceInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input InsuranceUpdateOneWithoutTaxisInput {
  connect: InsuranceWhereUniqueInput
  connectOrCreate: InsuranceCreateOrConnectWithoutTaxisInput
  create: InsuranceCreateWithoutTaxisInput
  delete: Boolean
  disconnect: Boolean
  update: InsuranceUpdateWithoutTaxisInput
  upsert: InsuranceUpsertWithoutTaxisInput
}

input InsuranceUpdateWithoutTaxisInput {
  coveragEndDate: DateTimeFieldUpdateOperationsInput
  coverageStartDate: DateTimeFieldUpdateOperationsInput
  coverageType: EnumCoverageTypeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  policyNumber: StringFieldUpdateOperationsInput
  provider: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input InsuranceUpsertWithoutTaxisInput {
  create: InsuranceCreateWithoutTaxisInput!
  update: InsuranceUpdateWithoutTaxisInput!
}

input InsuranceWhereInput {
  AND: [InsuranceWhereInput!]
  NOT: [InsuranceWhereInput!]
  OR: [InsuranceWhereInput!]
  coveragEndDate: DateTimeFilter
  coverageStartDate: DateTimeFilter
  coverageType: EnumCoverageTypeFilter
  createdAt: DateTimeFilter
  id: StringFilter
  isActive: BoolFilter
  policyNumber: StringFilter
  provider: StringFilter
  taxis: TaxiListRelationFilter
  updatedAt: DateTimeFilter
}

input InsuranceWhereUniqueInput {
  id: String
}

type Mutation {
  createInsurance(data: InsuranceCreateInput!): Insurance!
  createTaxi(data: TaxiCreateInput!): Taxi!
  createTaxiDriverMap(data: TaxiDriverMapCreateInput!): TaxiDriverMap!
  deleteInsurance(where: InsuranceWhereUniqueInput!): Insurance
  deleteTaxi(where: TaxiWhereUniqueInput!): Taxi
  deleteTaxiDriverMap(where: TaxiDriverMapWhereUniqueInput!): TaxiDriverMap
  deleteUser(where: UserWhereUniqueInput!): User
  signUpUser(data: UserCreateInput!): User!
  updateInsurance(data: InsuranceUpdateInput!, where: InsuranceWhereUniqueInput!): Insurance
  updateTaxi(data: TaxiUpdateInput!, where: TaxiWhereUniqueInput!): Taxi
  updateTaxiDriverMap(data: TaxiDriverMapUpdateInput!, where: TaxiDriverMapWhereUniqueInput!): TaxiDriverMap
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedEnumCoverageTypeFilter {
  equals: CoverageType
  in: [CoverageType!]
  not: NestedEnumCoverageTypeFilter
  notIn: [CoverageType!]
}

input NestedEnumUserRoleFilter {
  equals: UserRole
  in: [UserRole!]
  not: NestedEnumUserRoleFilter
  notIn: [UserRole!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Query {
  findFirstInsurance(cursor: InsuranceWhereUniqueInput, distinct: [InsuranceScalarFieldEnum!], orderBy: [InsuranceOrderByInput!], skip: Int, take: Int, where: InsuranceWhereInput): Insurance
  findFirstTaxi(cursor: TaxiWhereUniqueInput, distinct: [TaxiScalarFieldEnum!], orderBy: [TaxiOrderByInput!], skip: Int, take: Int, where: TaxiWhereInput): Taxi
  findFirstTaxiDriverMap(cursor: TaxiDriverMapWhereUniqueInput, distinct: [TaxiDriverMapScalarFieldEnum!], orderBy: [TaxiDriverMapOrderByInput!], skip: Int, take: Int, where: TaxiDriverMapWhereInput): TaxiDriverMap
  insurances(cursor: InsuranceWhereUniqueInput, distinct: [InsuranceScalarFieldEnum!], orderBy: [InsuranceOrderByInput!], skip: Int, take: Int, where: InsuranceWhereInput): [Insurance!]!
  taxiDriverMaps(cursor: TaxiDriverMapWhereUniqueInput, distinct: [TaxiDriverMapScalarFieldEnum!], orderBy: [TaxiDriverMapOrderByInput!], skip: Int, take: Int, where: TaxiDriverMapWhereInput): [TaxiDriverMap!]!
  taxis(cursor: TaxiWhereUniqueInput, distinct: [TaxiScalarFieldEnum!], orderBy: [TaxiOrderByInput!], skip: Int, take: Int, where: TaxiWhereInput): [Taxi!]!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Taxi {
  bodyNumber: String!
  chassisNumber: String!
  color: String!
  conductionSticker: String!
  createdAt: DateTime!
  engineNumber: String!
  id: String!
  insuranceId: String
  isActive: Boolean!
  make: String!
  model: String!
  plateNumber: String
  updatedAt: DateTime!
  variant: String!
}

input TaxiCreateInput {
  TaxiDriverMap: TaxiDriverMapCreateNestedManyWithoutTaxiInput
  bodyNumber: String!
  chassisNumber: String!
  color: String!
  conductionSticker: String!
  createdAt: DateTime
  engineNumber: String!
  id: String
  insurance: InsuranceCreateNestedOneWithoutTaxisInput
  isActive: Boolean
  make: String!
  model: String!
  plateNumber: String
  updatedAt: DateTime
  variant: String!
}

input TaxiCreateManyInsuranceInput {
  bodyNumber: String!
  chassisNumber: String!
  color: String!
  conductionSticker: String!
  createdAt: DateTime
  engineNumber: String!
  id: String
  isActive: Boolean
  make: String!
  model: String!
  plateNumber: String
  updatedAt: DateTime
  variant: String!
}

input TaxiCreateManyInsuranceInputEnvelope {
  data: [TaxiCreateManyInsuranceInput!]!
  skipDuplicates: Boolean
}

input TaxiCreateNestedManyWithoutInsuranceInput {
  connect: [TaxiWhereUniqueInput!]
  connectOrCreate: [TaxiCreateOrConnectWithoutInsuranceInput!]
  create: [TaxiCreateWithoutInsuranceInput!]
  createMany: TaxiCreateManyInsuranceInputEnvelope
}

input TaxiCreateNestedOneWithoutTaxiDriverMapInput {
  connect: TaxiWhereUniqueInput
  connectOrCreate: TaxiCreateOrConnectWithoutTaxiDriverMapInput
  create: TaxiCreateWithoutTaxiDriverMapInput
}

input TaxiCreateOrConnectWithoutInsuranceInput {
  create: TaxiCreateWithoutInsuranceInput!
  where: TaxiWhereUniqueInput!
}

input TaxiCreateOrConnectWithoutTaxiDriverMapInput {
  create: TaxiCreateWithoutTaxiDriverMapInput!
  where: TaxiWhereUniqueInput!
}

input TaxiCreateWithoutInsuranceInput {
  TaxiDriverMap: TaxiDriverMapCreateNestedManyWithoutTaxiInput
  bodyNumber: String!
  chassisNumber: String!
  color: String!
  conductionSticker: String!
  createdAt: DateTime
  engineNumber: String!
  id: String
  isActive: Boolean
  make: String!
  model: String!
  plateNumber: String
  updatedAt: DateTime
  variant: String!
}

input TaxiCreateWithoutTaxiDriverMapInput {
  bodyNumber: String!
  chassisNumber: String!
  color: String!
  conductionSticker: String!
  createdAt: DateTime
  engineNumber: String!
  id: String
  insurance: InsuranceCreateNestedOneWithoutTaxisInput
  isActive: Boolean
  make: String!
  model: String!
  plateNumber: String
  updatedAt: DateTime
  variant: String!
}

type TaxiDriverMap {
  createdAt: DateTime!
  driverId: String!
  endAt: DateTime
  id: String!
  isActive: Boolean!
  releaseOfficerId: String!
  startAt: DateTime!
  taxiId: String!
  updatedAt: DateTime!
  validatingOfficerId: String!
}

input TaxiDriverMapCreateInput {
  createdAt: DateTime
  driver: UserCreateNestedOneWithoutDriversInput!
  endAt: DateTime
  id: String
  isActive: Boolean
  releaseOfficer: UserCreateNestedOneWithoutReleasingOfficersInput!
  startAt: DateTime!
  taxi: TaxiCreateNestedOneWithoutTaxiDriverMapInput!
  updatedAt: DateTime
  validatingOfficer: UserCreateNestedOneWithoutValidatingOfficersInput!
}

input TaxiDriverMapCreateManyDriverInput {
  createdAt: DateTime
  endAt: DateTime
  id: String
  isActive: Boolean
  releaseOfficerId: String!
  startAt: DateTime!
  taxiId: String!
  updatedAt: DateTime
  validatingOfficerId: String!
}

input TaxiDriverMapCreateManyDriverInputEnvelope {
  data: [TaxiDriverMapCreateManyDriverInput!]!
  skipDuplicates: Boolean
}

input TaxiDriverMapCreateManyTaxiInput {
  createdAt: DateTime
  driverId: String!
  endAt: DateTime
  id: String
  isActive: Boolean
  releaseOfficerId: String!
  startAt: DateTime!
  updatedAt: DateTime
  validatingOfficerId: String!
}

input TaxiDriverMapCreateManyTaxiInputEnvelope {
  data: [TaxiDriverMapCreateManyTaxiInput!]!
  skipDuplicates: Boolean
}

input TaxiDriverMapCreateManyValidatingOfficerInput {
  createdAt: DateTime
  driverId: String!
  endAt: DateTime
  id: String
  isActive: Boolean
  releaseOfficerId: String!
  startAt: DateTime!
  taxiId: String!
  updatedAt: DateTime
}

input TaxiDriverMapCreateManyValidatingOfficerInputEnvelope {
  data: [TaxiDriverMapCreateManyValidatingOfficerInput!]!
  skipDuplicates: Boolean
}

input TaxiDriverMapCreateNestedManyWithoutDriverInput {
  connect: [TaxiDriverMapWhereUniqueInput!]
  connectOrCreate: [TaxiDriverMapCreateOrConnectWithoutDriverInput!]
  create: [TaxiDriverMapCreateWithoutDriverInput!]
  createMany: TaxiDriverMapCreateManyDriverInputEnvelope
}

input TaxiDriverMapCreateNestedManyWithoutTaxiInput {
  connect: [TaxiDriverMapWhereUniqueInput!]
  connectOrCreate: [TaxiDriverMapCreateOrConnectWithoutTaxiInput!]
  create: [TaxiDriverMapCreateWithoutTaxiInput!]
  createMany: TaxiDriverMapCreateManyTaxiInputEnvelope
}

input TaxiDriverMapCreateNestedManyWithoutValidatingOfficerInput {
  connect: [TaxiDriverMapWhereUniqueInput!]
  connectOrCreate: [TaxiDriverMapCreateOrConnectWithoutValidatingOfficerInput!]
  create: [TaxiDriverMapCreateWithoutValidatingOfficerInput!]
  createMany: TaxiDriverMapCreateManyValidatingOfficerInputEnvelope
}

input TaxiDriverMapCreateNestedOneWithoutReleaseOfficerInput {
  connect: TaxiDriverMapWhereUniqueInput
  connectOrCreate: TaxiDriverMapCreateOrConnectWithoutReleaseOfficerInput
  create: TaxiDriverMapCreateWithoutReleaseOfficerInput
}

input TaxiDriverMapCreateOrConnectWithoutDriverInput {
  create: TaxiDriverMapCreateWithoutDriverInput!
  where: TaxiDriverMapWhereUniqueInput!
}

input TaxiDriverMapCreateOrConnectWithoutReleaseOfficerInput {
  create: TaxiDriverMapCreateWithoutReleaseOfficerInput!
  where: TaxiDriverMapWhereUniqueInput!
}

input TaxiDriverMapCreateOrConnectWithoutTaxiInput {
  create: TaxiDriverMapCreateWithoutTaxiInput!
  where: TaxiDriverMapWhereUniqueInput!
}

input TaxiDriverMapCreateOrConnectWithoutValidatingOfficerInput {
  create: TaxiDriverMapCreateWithoutValidatingOfficerInput!
  where: TaxiDriverMapWhereUniqueInput!
}

input TaxiDriverMapCreateWithoutDriverInput {
  createdAt: DateTime
  endAt: DateTime
  id: String
  isActive: Boolean
  releaseOfficer: UserCreateNestedOneWithoutReleasingOfficersInput!
  startAt: DateTime!
  taxi: TaxiCreateNestedOneWithoutTaxiDriverMapInput!
  updatedAt: DateTime
  validatingOfficer: UserCreateNestedOneWithoutValidatingOfficersInput!
}

input TaxiDriverMapCreateWithoutReleaseOfficerInput {
  createdAt: DateTime
  driver: UserCreateNestedOneWithoutDriversInput!
  endAt: DateTime
  id: String
  isActive: Boolean
  startAt: DateTime!
  taxi: TaxiCreateNestedOneWithoutTaxiDriverMapInput!
  updatedAt: DateTime
  validatingOfficer: UserCreateNestedOneWithoutValidatingOfficersInput!
}

input TaxiDriverMapCreateWithoutTaxiInput {
  createdAt: DateTime
  driver: UserCreateNestedOneWithoutDriversInput!
  endAt: DateTime
  id: String
  isActive: Boolean
  releaseOfficer: UserCreateNestedOneWithoutReleasingOfficersInput!
  startAt: DateTime!
  updatedAt: DateTime
  validatingOfficer: UserCreateNestedOneWithoutValidatingOfficersInput!
}

input TaxiDriverMapCreateWithoutValidatingOfficerInput {
  createdAt: DateTime
  driver: UserCreateNestedOneWithoutDriversInput!
  endAt: DateTime
  id: String
  isActive: Boolean
  releaseOfficer: UserCreateNestedOneWithoutReleasingOfficersInput!
  startAt: DateTime!
  taxi: TaxiCreateNestedOneWithoutTaxiDriverMapInput!
  updatedAt: DateTime
}

input TaxiDriverMapListRelationFilter {
  every: TaxiDriverMapWhereInput
  none: TaxiDriverMapWhereInput
  some: TaxiDriverMapWhereInput
}

input TaxiDriverMapOrderByInput {
  createdAt: SortOrder
  driverId: SortOrder
  endAt: SortOrder
  id: SortOrder
  isActive: SortOrder
  releaseOfficerId: SortOrder
  startAt: SortOrder
  taxiId: SortOrder
  updatedAt: SortOrder
  validatingOfficerId: SortOrder
}

input TaxiDriverMapRelationFilter {
  is: TaxiDriverMapWhereInput
  isNot: TaxiDriverMapWhereInput
}

enum TaxiDriverMapScalarFieldEnum {
  createdAt
  driverId
  endAt
  id
  isActive
  releaseOfficerId
  startAt
  taxiId
  updatedAt
  validatingOfficerId
}

input TaxiDriverMapScalarWhereInput {
  AND: [TaxiDriverMapScalarWhereInput!]
  NOT: [TaxiDriverMapScalarWhereInput!]
  OR: [TaxiDriverMapScalarWhereInput!]
  createdAt: DateTimeFilter
  driverId: StringFilter
  endAt: DateTimeNullableFilter
  id: StringFilter
  isActive: BoolFilter
  releaseOfficerId: StringFilter
  startAt: DateTimeFilter
  taxiId: StringFilter
  updatedAt: DateTimeFilter
  validatingOfficerId: StringFilter
}

input TaxiDriverMapUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  driver: UserUpdateOneRequiredWithoutDriversInput
  endAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  releaseOfficer: UserUpdateOneRequiredWithoutReleasingOfficersInput
  startAt: DateTimeFieldUpdateOperationsInput
  taxi: TaxiUpdateOneRequiredWithoutTaxiDriverMapInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  validatingOfficer: UserUpdateOneRequiredWithoutValidatingOfficersInput
}

input TaxiDriverMapUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  endAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  startAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TaxiDriverMapUpdateManyWithWhereWithoutDriverInput {
  data: TaxiDriverMapUpdateManyMutationInput!
  where: TaxiDriverMapScalarWhereInput!
}

input TaxiDriverMapUpdateManyWithWhereWithoutTaxiInput {
  data: TaxiDriverMapUpdateManyMutationInput!
  where: TaxiDriverMapScalarWhereInput!
}

input TaxiDriverMapUpdateManyWithWhereWithoutValidatingOfficerInput {
  data: TaxiDriverMapUpdateManyMutationInput!
  where: TaxiDriverMapScalarWhereInput!
}

input TaxiDriverMapUpdateManyWithoutDriverInput {
  connect: [TaxiDriverMapWhereUniqueInput!]
  connectOrCreate: [TaxiDriverMapCreateOrConnectWithoutDriverInput!]
  create: [TaxiDriverMapCreateWithoutDriverInput!]
  createMany: TaxiDriverMapCreateManyDriverInputEnvelope
  delete: [TaxiDriverMapWhereUniqueInput!]
  deleteMany: [TaxiDriverMapScalarWhereInput!]
  disconnect: [TaxiDriverMapWhereUniqueInput!]
  set: [TaxiDriverMapWhereUniqueInput!]
  update: [TaxiDriverMapUpdateWithWhereUniqueWithoutDriverInput!]
  updateMany: [TaxiDriverMapUpdateManyWithWhereWithoutDriverInput!]
  upsert: [TaxiDriverMapUpsertWithWhereUniqueWithoutDriverInput!]
}

input TaxiDriverMapUpdateManyWithoutTaxiInput {
  connect: [TaxiDriverMapWhereUniqueInput!]
  connectOrCreate: [TaxiDriverMapCreateOrConnectWithoutTaxiInput!]
  create: [TaxiDriverMapCreateWithoutTaxiInput!]
  createMany: TaxiDriverMapCreateManyTaxiInputEnvelope
  delete: [TaxiDriverMapWhereUniqueInput!]
  deleteMany: [TaxiDriverMapScalarWhereInput!]
  disconnect: [TaxiDriverMapWhereUniqueInput!]
  set: [TaxiDriverMapWhereUniqueInput!]
  update: [TaxiDriverMapUpdateWithWhereUniqueWithoutTaxiInput!]
  updateMany: [TaxiDriverMapUpdateManyWithWhereWithoutTaxiInput!]
  upsert: [TaxiDriverMapUpsertWithWhereUniqueWithoutTaxiInput!]
}

input TaxiDriverMapUpdateManyWithoutValidatingOfficerInput {
  connect: [TaxiDriverMapWhereUniqueInput!]
  connectOrCreate: [TaxiDriverMapCreateOrConnectWithoutValidatingOfficerInput!]
  create: [TaxiDriverMapCreateWithoutValidatingOfficerInput!]
  createMany: TaxiDriverMapCreateManyValidatingOfficerInputEnvelope
  delete: [TaxiDriverMapWhereUniqueInput!]
  deleteMany: [TaxiDriverMapScalarWhereInput!]
  disconnect: [TaxiDriverMapWhereUniqueInput!]
  set: [TaxiDriverMapWhereUniqueInput!]
  update: [TaxiDriverMapUpdateWithWhereUniqueWithoutValidatingOfficerInput!]
  updateMany: [TaxiDriverMapUpdateManyWithWhereWithoutValidatingOfficerInput!]
  upsert: [TaxiDriverMapUpsertWithWhereUniqueWithoutValidatingOfficerInput!]
}

input TaxiDriverMapUpdateOneWithoutReleaseOfficerInput {
  connect: TaxiDriverMapWhereUniqueInput
  connectOrCreate: TaxiDriverMapCreateOrConnectWithoutReleaseOfficerInput
  create: TaxiDriverMapCreateWithoutReleaseOfficerInput
  delete: Boolean
  disconnect: Boolean
  update: TaxiDriverMapUpdateWithoutReleaseOfficerInput
  upsert: TaxiDriverMapUpsertWithoutReleaseOfficerInput
}

input TaxiDriverMapUpdateWithWhereUniqueWithoutDriverInput {
  data: TaxiDriverMapUpdateWithoutDriverInput!
  where: TaxiDriverMapWhereUniqueInput!
}

input TaxiDriverMapUpdateWithWhereUniqueWithoutTaxiInput {
  data: TaxiDriverMapUpdateWithoutTaxiInput!
  where: TaxiDriverMapWhereUniqueInput!
}

input TaxiDriverMapUpdateWithWhereUniqueWithoutValidatingOfficerInput {
  data: TaxiDriverMapUpdateWithoutValidatingOfficerInput!
  where: TaxiDriverMapWhereUniqueInput!
}

input TaxiDriverMapUpdateWithoutDriverInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  endAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  releaseOfficer: UserUpdateOneRequiredWithoutReleasingOfficersInput
  startAt: DateTimeFieldUpdateOperationsInput
  taxi: TaxiUpdateOneRequiredWithoutTaxiDriverMapInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  validatingOfficer: UserUpdateOneRequiredWithoutValidatingOfficersInput
}

input TaxiDriverMapUpdateWithoutReleaseOfficerInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  driver: UserUpdateOneRequiredWithoutDriversInput
  endAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  startAt: DateTimeFieldUpdateOperationsInput
  taxi: TaxiUpdateOneRequiredWithoutTaxiDriverMapInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  validatingOfficer: UserUpdateOneRequiredWithoutValidatingOfficersInput
}

input TaxiDriverMapUpdateWithoutTaxiInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  driver: UserUpdateOneRequiredWithoutDriversInput
  endAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  releaseOfficer: UserUpdateOneRequiredWithoutReleasingOfficersInput
  startAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  validatingOfficer: UserUpdateOneRequiredWithoutValidatingOfficersInput
}

input TaxiDriverMapUpdateWithoutValidatingOfficerInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  driver: UserUpdateOneRequiredWithoutDriversInput
  endAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  releaseOfficer: UserUpdateOneRequiredWithoutReleasingOfficersInput
  startAt: DateTimeFieldUpdateOperationsInput
  taxi: TaxiUpdateOneRequiredWithoutTaxiDriverMapInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TaxiDriverMapUpsertWithWhereUniqueWithoutDriverInput {
  create: TaxiDriverMapCreateWithoutDriverInput!
  update: TaxiDriverMapUpdateWithoutDriverInput!
  where: TaxiDriverMapWhereUniqueInput!
}

input TaxiDriverMapUpsertWithWhereUniqueWithoutTaxiInput {
  create: TaxiDriverMapCreateWithoutTaxiInput!
  update: TaxiDriverMapUpdateWithoutTaxiInput!
  where: TaxiDriverMapWhereUniqueInput!
}

input TaxiDriverMapUpsertWithWhereUniqueWithoutValidatingOfficerInput {
  create: TaxiDriverMapCreateWithoutValidatingOfficerInput!
  update: TaxiDriverMapUpdateWithoutValidatingOfficerInput!
  where: TaxiDriverMapWhereUniqueInput!
}

input TaxiDriverMapUpsertWithoutReleaseOfficerInput {
  create: TaxiDriverMapCreateWithoutReleaseOfficerInput!
  update: TaxiDriverMapUpdateWithoutReleaseOfficerInput!
}

input TaxiDriverMapWhereInput {
  AND: [TaxiDriverMapWhereInput!]
  NOT: [TaxiDriverMapWhereInput!]
  OR: [TaxiDriverMapWhereInput!]
  createdAt: DateTimeFilter
  driver: UserRelationFilter
  driverId: StringFilter
  endAt: DateTimeNullableFilter
  id: StringFilter
  isActive: BoolFilter
  releaseOfficer: UserRelationFilter
  releaseOfficerId: StringFilter
  startAt: DateTimeFilter
  taxi: TaxiRelationFilter
  taxiId: StringFilter
  updatedAt: DateTimeFilter
  validatingOfficer: UserRelationFilter
  validatingOfficerId: StringFilter
}

input TaxiDriverMapWhereUniqueInput {
  id: String
}

input TaxiListRelationFilter {
  every: TaxiWhereInput
  none: TaxiWhereInput
  some: TaxiWhereInput
}

input TaxiOrderByInput {
  bodyNumber: SortOrder
  chassisNumber: SortOrder
  color: SortOrder
  conductionSticker: SortOrder
  createdAt: SortOrder
  engineNumber: SortOrder
  id: SortOrder
  insuranceId: SortOrder
  isActive: SortOrder
  make: SortOrder
  model: SortOrder
  plateNumber: SortOrder
  updatedAt: SortOrder
  variant: SortOrder
}

input TaxiRelationFilter {
  is: TaxiWhereInput
  isNot: TaxiWhereInput
}

enum TaxiScalarFieldEnum {
  bodyNumber
  chassisNumber
  color
  conductionSticker
  createdAt
  engineNumber
  id
  insuranceId
  isActive
  make
  model
  plateNumber
  updatedAt
  variant
}

input TaxiScalarWhereInput {
  AND: [TaxiScalarWhereInput!]
  NOT: [TaxiScalarWhereInput!]
  OR: [TaxiScalarWhereInput!]
  bodyNumber: StringFilter
  chassisNumber: StringFilter
  color: StringFilter
  conductionSticker: StringFilter
  createdAt: DateTimeFilter
  engineNumber: StringFilter
  id: StringFilter
  insuranceId: StringNullableFilter
  isActive: BoolFilter
  make: StringFilter
  model: StringFilter
  plateNumber: StringNullableFilter
  updatedAt: DateTimeFilter
  variant: StringFilter
}

input TaxiUpdateInput {
  TaxiDriverMap: TaxiDriverMapUpdateManyWithoutTaxiInput
  bodyNumber: StringFieldUpdateOperationsInput
  chassisNumber: StringFieldUpdateOperationsInput
  color: StringFieldUpdateOperationsInput
  conductionSticker: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  engineNumber: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  insurance: InsuranceUpdateOneWithoutTaxisInput
  isActive: BoolFieldUpdateOperationsInput
  make: StringFieldUpdateOperationsInput
  model: StringFieldUpdateOperationsInput
  plateNumber: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  variant: StringFieldUpdateOperationsInput
}

input TaxiUpdateManyMutationInput {
  bodyNumber: StringFieldUpdateOperationsInput
  chassisNumber: StringFieldUpdateOperationsInput
  color: StringFieldUpdateOperationsInput
  conductionSticker: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  engineNumber: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  make: StringFieldUpdateOperationsInput
  model: StringFieldUpdateOperationsInput
  plateNumber: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  variant: StringFieldUpdateOperationsInput
}

input TaxiUpdateManyWithWhereWithoutInsuranceInput {
  data: TaxiUpdateManyMutationInput!
  where: TaxiScalarWhereInput!
}

input TaxiUpdateManyWithoutInsuranceInput {
  connect: [TaxiWhereUniqueInput!]
  connectOrCreate: [TaxiCreateOrConnectWithoutInsuranceInput!]
  create: [TaxiCreateWithoutInsuranceInput!]
  createMany: TaxiCreateManyInsuranceInputEnvelope
  delete: [TaxiWhereUniqueInput!]
  deleteMany: [TaxiScalarWhereInput!]
  disconnect: [TaxiWhereUniqueInput!]
  set: [TaxiWhereUniqueInput!]
  update: [TaxiUpdateWithWhereUniqueWithoutInsuranceInput!]
  updateMany: [TaxiUpdateManyWithWhereWithoutInsuranceInput!]
  upsert: [TaxiUpsertWithWhereUniqueWithoutInsuranceInput!]
}

input TaxiUpdateOneRequiredWithoutTaxiDriverMapInput {
  connect: TaxiWhereUniqueInput
  connectOrCreate: TaxiCreateOrConnectWithoutTaxiDriverMapInput
  create: TaxiCreateWithoutTaxiDriverMapInput
  update: TaxiUpdateWithoutTaxiDriverMapInput
  upsert: TaxiUpsertWithoutTaxiDriverMapInput
}

input TaxiUpdateWithWhereUniqueWithoutInsuranceInput {
  data: TaxiUpdateWithoutInsuranceInput!
  where: TaxiWhereUniqueInput!
}

input TaxiUpdateWithoutInsuranceInput {
  TaxiDriverMap: TaxiDriverMapUpdateManyWithoutTaxiInput
  bodyNumber: StringFieldUpdateOperationsInput
  chassisNumber: StringFieldUpdateOperationsInput
  color: StringFieldUpdateOperationsInput
  conductionSticker: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  engineNumber: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  make: StringFieldUpdateOperationsInput
  model: StringFieldUpdateOperationsInput
  plateNumber: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  variant: StringFieldUpdateOperationsInput
}

input TaxiUpdateWithoutTaxiDriverMapInput {
  bodyNumber: StringFieldUpdateOperationsInput
  chassisNumber: StringFieldUpdateOperationsInput
  color: StringFieldUpdateOperationsInput
  conductionSticker: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  engineNumber: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  insurance: InsuranceUpdateOneWithoutTaxisInput
  isActive: BoolFieldUpdateOperationsInput
  make: StringFieldUpdateOperationsInput
  model: StringFieldUpdateOperationsInput
  plateNumber: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  variant: StringFieldUpdateOperationsInput
}

input TaxiUpsertWithWhereUniqueWithoutInsuranceInput {
  create: TaxiCreateWithoutInsuranceInput!
  update: TaxiUpdateWithoutInsuranceInput!
  where: TaxiWhereUniqueInput!
}

input TaxiUpsertWithoutTaxiDriverMapInput {
  create: TaxiCreateWithoutTaxiDriverMapInput!
  update: TaxiUpdateWithoutTaxiDriverMapInput!
}

input TaxiWhereInput {
  AND: [TaxiWhereInput!]
  NOT: [TaxiWhereInput!]
  OR: [TaxiWhereInput!]
  TaxiDriverMap: TaxiDriverMapListRelationFilter
  bodyNumber: StringFilter
  chassisNumber: StringFilter
  color: StringFilter
  conductionSticker: StringFilter
  createdAt: DateTimeFilter
  engineNumber: StringFilter
  id: StringFilter
  insurance: InsuranceRelationFilter
  insuranceId: StringNullableFilter
  isActive: BoolFilter
  make: StringFilter
  model: StringFilter
  plateNumber: StringNullableFilter
  updatedAt: DateTimeFilter
  variant: StringFilter
}

input TaxiWhereUniqueInput {
  id: String
}

type User {
  authId: String!
  birthdate: DateTime
  contactNumber: String!
  createdAt: DateTime!
  emailAddress: String
  firstName: String!
  id: String!
  isActive: Boolean!
  lastName: String
  licenseExpiry: DateTime
  licenseNumber: String
  middleName: String
  role: UserRole!
  updatedAt: DateTime!
}

input UserCreateInput {
  authId: String!
  birthdate: DateTime
  contactNumber: String!
  createdAt: DateTime
  drivers: TaxiDriverMapCreateNestedManyWithoutDriverInput
  emailAddress: String
  firstName: String!
  id: String
  isActive: Boolean
  lastName: String
  licenseExpiry: DateTime
  licenseNumber: String
  middleName: String
  releasingOfficers: TaxiDriverMapCreateNestedOneWithoutReleaseOfficerInput
  role: UserRole!
  updatedAt: DateTime
  validatingOfficers: TaxiDriverMapCreateNestedManyWithoutValidatingOfficerInput
}

input UserCreateNestedOneWithoutDriversInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutDriversInput
  create: UserCreateWithoutDriversInput
}

input UserCreateNestedOneWithoutReleasingOfficersInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutReleasingOfficersInput
  create: UserCreateWithoutReleasingOfficersInput
}

input UserCreateNestedOneWithoutValidatingOfficersInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutValidatingOfficersInput
  create: UserCreateWithoutValidatingOfficersInput
}

input UserCreateOrConnectWithoutDriversInput {
  create: UserCreateWithoutDriversInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutReleasingOfficersInput {
  create: UserCreateWithoutReleasingOfficersInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutValidatingOfficersInput {
  create: UserCreateWithoutValidatingOfficersInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutDriversInput {
  authId: String!
  birthdate: DateTime
  contactNumber: String!
  createdAt: DateTime
  emailAddress: String
  firstName: String!
  id: String
  isActive: Boolean
  lastName: String
  licenseExpiry: DateTime
  licenseNumber: String
  middleName: String
  releasingOfficers: TaxiDriverMapCreateNestedOneWithoutReleaseOfficerInput
  role: UserRole!
  updatedAt: DateTime
  validatingOfficers: TaxiDriverMapCreateNestedManyWithoutValidatingOfficerInput
}

input UserCreateWithoutReleasingOfficersInput {
  authId: String!
  birthdate: DateTime
  contactNumber: String!
  createdAt: DateTime
  drivers: TaxiDriverMapCreateNestedManyWithoutDriverInput
  emailAddress: String
  firstName: String!
  id: String
  isActive: Boolean
  lastName: String
  licenseExpiry: DateTime
  licenseNumber: String
  middleName: String
  role: UserRole!
  updatedAt: DateTime
  validatingOfficers: TaxiDriverMapCreateNestedManyWithoutValidatingOfficerInput
}

input UserCreateWithoutValidatingOfficersInput {
  authId: String!
  birthdate: DateTime
  contactNumber: String!
  createdAt: DateTime
  drivers: TaxiDriverMapCreateNestedManyWithoutDriverInput
  emailAddress: String
  firstName: String!
  id: String
  isActive: Boolean
  lastName: String
  licenseExpiry: DateTime
  licenseNumber: String
  middleName: String
  releasingOfficers: TaxiDriverMapCreateNestedOneWithoutReleaseOfficerInput
  role: UserRole!
  updatedAt: DateTime
}

input UserOrderByInput {
  authId: SortOrder
  birthdate: SortOrder
  contactNumber: SortOrder
  createdAt: SortOrder
  emailAddress: SortOrder
  firstName: SortOrder
  id: SortOrder
  isActive: SortOrder
  lastName: SortOrder
  licenseExpiry: SortOrder
  licenseNumber: SortOrder
  middleName: SortOrder
  role: SortOrder
  updatedAt: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserRole {
  ADMIN
  DRIVER
  SUPER_ADMIN
}

enum UserScalarFieldEnum {
  authId
  birthdate
  contactNumber
  createdAt
  emailAddress
  firstName
  id
  isActive
  lastName
  licenseExpiry
  licenseNumber
  middleName
  role
  updatedAt
}

input UserUpdateInput {
  authId: StringFieldUpdateOperationsInput
  birthdate: NullableDateTimeFieldUpdateOperationsInput
  contactNumber: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  drivers: TaxiDriverMapUpdateManyWithoutDriverInput
  emailAddress: NullableStringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  licenseExpiry: NullableDateTimeFieldUpdateOperationsInput
  licenseNumber: NullableStringFieldUpdateOperationsInput
  middleName: NullableStringFieldUpdateOperationsInput
  releasingOfficers: TaxiDriverMapUpdateOneWithoutReleaseOfficerInput
  role: EnumUserRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  validatingOfficers: TaxiDriverMapUpdateManyWithoutValidatingOfficerInput
}

input UserUpdateOneRequiredWithoutDriversInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutDriversInput
  create: UserCreateWithoutDriversInput
  update: UserUpdateWithoutDriversInput
  upsert: UserUpsertWithoutDriversInput
}

input UserUpdateOneRequiredWithoutReleasingOfficersInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutReleasingOfficersInput
  create: UserCreateWithoutReleasingOfficersInput
  update: UserUpdateWithoutReleasingOfficersInput
  upsert: UserUpsertWithoutReleasingOfficersInput
}

input UserUpdateOneRequiredWithoutValidatingOfficersInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutValidatingOfficersInput
  create: UserCreateWithoutValidatingOfficersInput
  update: UserUpdateWithoutValidatingOfficersInput
  upsert: UserUpsertWithoutValidatingOfficersInput
}

input UserUpdateWithoutDriversInput {
  authId: StringFieldUpdateOperationsInput
  birthdate: NullableDateTimeFieldUpdateOperationsInput
  contactNumber: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  emailAddress: NullableStringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  licenseExpiry: NullableDateTimeFieldUpdateOperationsInput
  licenseNumber: NullableStringFieldUpdateOperationsInput
  middleName: NullableStringFieldUpdateOperationsInput
  releasingOfficers: TaxiDriverMapUpdateOneWithoutReleaseOfficerInput
  role: EnumUserRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  validatingOfficers: TaxiDriverMapUpdateManyWithoutValidatingOfficerInput
}

input UserUpdateWithoutReleasingOfficersInput {
  authId: StringFieldUpdateOperationsInput
  birthdate: NullableDateTimeFieldUpdateOperationsInput
  contactNumber: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  drivers: TaxiDriverMapUpdateManyWithoutDriverInput
  emailAddress: NullableStringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  licenseExpiry: NullableDateTimeFieldUpdateOperationsInput
  licenseNumber: NullableStringFieldUpdateOperationsInput
  middleName: NullableStringFieldUpdateOperationsInput
  role: EnumUserRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  validatingOfficers: TaxiDriverMapUpdateManyWithoutValidatingOfficerInput
}

input UserUpdateWithoutValidatingOfficersInput {
  authId: StringFieldUpdateOperationsInput
  birthdate: NullableDateTimeFieldUpdateOperationsInput
  contactNumber: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  drivers: TaxiDriverMapUpdateManyWithoutDriverInput
  emailAddress: NullableStringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  licenseExpiry: NullableDateTimeFieldUpdateOperationsInput
  licenseNumber: NullableStringFieldUpdateOperationsInput
  middleName: NullableStringFieldUpdateOperationsInput
  releasingOfficers: TaxiDriverMapUpdateOneWithoutReleaseOfficerInput
  role: EnumUserRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpsertWithoutDriversInput {
  create: UserCreateWithoutDriversInput!
  update: UserUpdateWithoutDriversInput!
}

input UserUpsertWithoutReleasingOfficersInput {
  create: UserCreateWithoutReleasingOfficersInput!
  update: UserUpdateWithoutReleasingOfficersInput!
}

input UserUpsertWithoutValidatingOfficersInput {
  create: UserCreateWithoutValidatingOfficersInput!
  update: UserUpdateWithoutValidatingOfficersInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  authId: StringFilter
  birthdate: DateTimeNullableFilter
  contactNumber: StringFilter
  createdAt: DateTimeFilter
  drivers: TaxiDriverMapListRelationFilter
  emailAddress: StringNullableFilter
  firstName: StringFilter
  id: StringFilter
  isActive: BoolFilter
  lastName: StringNullableFilter
  licenseExpiry: DateTimeNullableFilter
  licenseNumber: StringNullableFilter
  middleName: StringNullableFilter
  releasingOfficers: TaxiDriverMapRelationFilter
  role: EnumUserRoleFilter
  updatedAt: DateTimeFilter
  validatingOfficers: TaxiDriverMapListRelationFilter
}

input UserWhereUniqueInput {
  id: String
}
